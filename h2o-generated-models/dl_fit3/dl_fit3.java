/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-08-13T21:02:27.296-03:00
  3.10.5.3
  
  Standalone prediction code with sample test data for DeepLearningModel named dl_fit3

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/dl_fit3 > dl_fit3.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m dl_fit3.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="dl_fit3", algorithm="deeplearning")
public class dl_fit3 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 33; }
  public int nclasses() { return 2; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[33];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[33];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 0.14303284157613805;
        sa[1] = 0.15198149597267357;
        sa[2] = 2.3398757114850626;
        sa[3] = 4.632571600282012;
        sa[4] = 2.1874431228219526;
        sa[5] = 3.277915482446839;
        sa[6] = 2.2799653050365416;
        sa[7] = 0.058354787648175935;
        sa[8] = 0.05267858405494233;
        sa[9] = 0.061071057799624656;
        sa[10] = 0.05500642590081838;
        sa[11] = 0.05676565187181893;
        sa[12] = 0.054899934459167146;
        sa[13] = 0.05620880628427175;
        sa[14] = 0.06980462928116293;
        sa[15] = 0.06656928101437071;
        sa[16] = 0.07727863286005399;
        sa[17] = 0.11026485619633644;
        sa[18] = 0.06267718548116735;
        sa[19] = 0.09036257102985362;
        sa[20] = 0.07634362399842087;
        sa[21] = 0.0827303675178818;
        sa[22] = 0.06251077089031995;
        sa[23] = 0.05122937321846432;
        sa[24] = 0.05441512676233111;
        sa[25] = 0.06631899593706968;
        sa[26] = 0.06447428516913292;
        sa[27] = 0.04703064572359878;
        sa[28] = 0.04649056485490492;
        sa[29] = 0.04628615230055028;
        sa[30] = 0.060353161196956294;
        sa[31] = 0.06413753579066005;
        sa[32] = 0.048190387101530396;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[33];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 68.89088899273844;
        sa[1] = 73.67564167086056;
        sa[2] = 0.7595262060536343;
        sa[3] = 0.04899705226831548;
        sa[4] = 0.7025127615213171;
        sa[5] = 0.10385361995830038;
        sa[6] = 0.7400603925515853;
        sa[7] = 55.46314436695668;
        sa[8] = 50.33744338198289;
        sa[9] = 57.558595154216746;
        sa[10] = 49.86942806815729;
        sa[11] = 59.690371342296324;
        sa[12] = 53.41284420159613;
        sa[13] = 49.70390574448204;
        sa[14] = 57.427466029189745;
        sa[15] = 63.86453016032781;
        sa[16] = 66.31483212308572;
        sa[17] = 66.4853512114457;
        sa[18] = 62.29066611546482;
        sa[19] = 67.13154252642173;
        sa[20] = 67.35123840678698;
        sa[21] = 67.54804443166292;
        sa[22] = 61.21256021281183;
        sa[23] = 52.12956538931628;
        sa[24] = 56.04672334459704;
        sa[25] = 58.214690128693626;
        sa[26] = 55.10869760586675;
        sa[27] = 46.938142569559275;
        sa[28] = 50.59069667122005;
        sa[29] = 48.186462003019635;
        sa[30] = 14.527608023581855;
        sa[31] = 15.670995398662745;
        sa[32] = 19.969309439930964;
      }
    }
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {33,10,10,2};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ dl_fit3_Activation_0.VALUES,
      /* Rectifier */ dl_fit3_Activation_1.VALUES,
      /* Rectifier */ dl_fit3_Activation_2.VALUES,
      /* Softmax */ dl_fit3_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ dl_fit3_Bias_0.VALUES,
      /* Rectifier */ dl_fit3_Bias_1.VALUES,
      /* Rectifier */ dl_fit3_Bias_2.VALUES,
      /* Softmax */ dl_fit3_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ dl_fit3_Weight_0.VALUES,
      /* Rectifier */ dl_fit3_Weight_1.VALUES,
      /* Rectifier */ dl_fit3_Weight_2.VALUES,
      /* Softmax */ dl_fit3_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_dl_fit3.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* overall_rating */ null,
    /* potential */ null,
    /* preferred_footright */ null,
    /* attacking_work_ratelow */ null,
    /* attacking_work_ratemedium */ null,
    /* defensive_work_ratelow */ null,
    /* defensive_work_ratemedium */ null,
    /* crossing */ null,
    /* finishing */ null,
    /* heading_accuracy */ null,
    /* volleys */ null,
    /* dribbling */ null,
    /* curve */ null,
    /* free_kick_accuracy */ null,
    /* long_passing */ null,
    /* ball_control */ null,
    /* agility */ null,
    /* reactions */ null,
    /* shot_power */ null,
    /* jumping */ null,
    /* stamina */ null,
    /* strength */ null,
    /* aggression */ null,
    /* interceptions */ null,
    /* positioning */ null,
    /* vision */ null,
    /* penalties */ null,
    /* marking */ null,
    /* standing_tackle */ null,
    /* sliding_tackle */ null,
    /* gk_diving */ null,
    /* gk_handling */ null,
    /* gk_kicking */ null,
    /* positionSUB */ dl_fit3_ColInfo_33.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.47163706952333023,0.5283629304766698};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public dl_fit3() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-2641605968812113616L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.23865478547646637);
    return preds;
  }
}
// Neuron activation values for Input layer
class dl_fit3_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[33];
  static {
    dl_fit3_Activation_0_0.fill(VALUES);
  }
  static final class dl_fit3_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class dl_fit3_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit3_Activation_1_0.fill(VALUES);
  }
  static final class dl_fit3_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class dl_fit3_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit3_Activation_2_0.fill(VALUES);
  }
  static final class dl_fit3_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class dl_fit3_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    dl_fit3_Activation_3_0.fill(VALUES);
  }
  static final class dl_fit3_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class dl_fit3_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class dl_fit3_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit3_Bias_1_0.fill(VALUES);
  }
  static final class dl_fit3_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -1.1002997691043377;
      sa[1] = -0.05395823319316097;
      sa[2] = -0.5990962301083472;
      sa[3] = 0.12551443029325923;
      sa[4] = -0.7515135245048951;
      sa[5] = -1.3268388027645774;
      sa[6] = -0.07958200806060507;
      sa[7] = -0.5841649334654163;
      sa[8] = -0.8245436937879058;
      sa[9] = -0.22690002012920998;
    }
  }
}
// Neuron bias values for Rectifier layer
class dl_fit3_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit3_Bias_2_0.fill(VALUES);
  }
  static final class dl_fit3_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.3033493257647297;
      sa[1] = 0.8366761068727787;
      sa[2] = 1.1782262956822018;
      sa[3] = 0.005799321808894641;
      sa[4] = 0.18192161646220917;
      sa[5] = -0.11643872922457636;
      sa[6] = 0.9598149913774536;
      sa[7] = 0.92962955864665;
      sa[8] = 0.3604941867147276;
      sa[9] = 0.4807897191403464;
    }
  }
}
// Neuron bias values for Softmax layer
class dl_fit3_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    dl_fit3_Bias_3_0.fill(VALUES);
  }
  static final class dl_fit3_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.06575371432687219;
      sa[1] = -0.04833344797712581;
    }
  }
}
class dl_fit3_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class dl_fit3_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[330];
  static {
    dl_fit3_Weight_1_0.fill(VALUES);
  }
  static final class dl_fit3_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.49582347f;
      sa[1] = -0.32162955f;
      sa[2] = -0.07982868f;
      sa[3] = 0.13765803f;
      sa[4] = 0.15089229f;
      sa[5] = 0.14363922f;
      sa[6] = 0.030783173f;
      sa[7] = -0.34014693f;
      sa[8] = -0.2371262f;
      sa[9] = -0.053057674f;
      sa[10] = 0.5041148f;
      sa[11] = 0.15476519f;
      sa[12] = 0.9231657f;
      sa[13] = -0.3349113f;
      sa[14] = -0.13465792f;
      sa[15] = 0.06944944f;
      sa[16] = 0.32044733f;
      sa[17] = -0.22409736f;
      sa[18] = 0.14141943f;
      sa[19] = -0.2885689f;
      sa[20] = 0.16957678f;
      sa[21] = -0.68110776f;
      sa[22] = -0.22178926f;
      sa[23] = -0.74912333f;
      sa[24] = 0.040116828f;
      sa[25] = -0.3020664f;
      sa[26] = -0.60636055f;
      sa[27] = 0.01157744f;
      sa[28] = -0.43901983f;
      sa[29] = 0.60574603f;
      sa[30] = 0.6664693f;
      sa[31] = -0.057421558f;
      sa[32] = -0.43466234f;
      sa[33] = -0.37327334f;
      sa[34] = -0.22689031f;
      sa[35] = 0.8478168f;
      sa[36] = 0.3414242f;
      sa[37] = 0.13909593f;
      sa[38] = -0.049201272f;
      sa[39] = 0.023840934f;
      sa[40] = 0.20303065f;
      sa[41] = -0.37389657f;
      sa[42] = 0.25276703f;
      sa[43] = -0.15899585f;
      sa[44] = -0.4992257f;
      sa[45] = -0.22893678f;
      sa[46] = 0.007371915f;
      sa[47] = 0.10128155f;
      sa[48] = 0.4675762f;
      sa[49] = -0.10541419f;
      sa[50] = 0.5491453f;
      sa[51] = 0.4204501f;
      sa[52] = 0.09069487f;
      sa[53] = -0.1342898f;
      sa[54] = 0.30565953f;
      sa[55] = -0.3271318f;
      sa[56] = -0.13070305f;
      sa[57] = 0.30029356f;
      sa[58] = 0.1279619f;
      sa[59] = 0.13033883f;
      sa[60] = 0.089604676f;
      sa[61] = 0.20608144f;
      sa[62] = -0.36065778f;
      sa[63] = 0.01429819f;
      sa[64] = 0.079872616f;
      sa[65] = 0.12930098f;
      sa[66] = 0.3695403f;
      sa[67] = -0.23548307f;
      sa[68] = 0.22883466f;
      sa[69] = 0.016206557f;
      sa[70] = -0.42462572f;
      sa[71] = 0.17593637f;
      sa[72] = -0.09176614f;
      sa[73] = -0.3512919f;
      sa[74] = 0.95404965f;
      sa[75] = -0.412502f;
      sa[76] = -0.0042349813f;
      sa[77] = -0.33364478f;
      sa[78] = 0.27843273f;
      sa[79] = -0.30259937f;
      sa[80] = -0.26371932f;
      sa[81] = -0.2686938f;
      sa[82] = 0.27421883f;
      sa[83] = 0.019002616f;
      sa[84] = -0.2920433f;
      sa[85] = -0.7524619f;
      sa[86] = 0.18701562f;
      sa[87] = -0.061828416f;
      sa[88] = -0.7327571f;
      sa[89] = -0.12670588f;
      sa[90] = 0.3353831f;
      sa[91] = 0.13519815f;
      sa[92] = 0.34500694f;
      sa[93] = -0.022293486f;
      sa[94] = -0.08722062f;
      sa[95] = 0.18678428f;
      sa[96] = 0.14170866f;
      sa[97] = -0.5732384f;
      sa[98] = -0.09361191f;
      sa[99] = -0.21756399f;
      sa[100] = -0.41035676f;
      sa[101] = -0.2869348f;
      sa[102] = 0.1073286f;
      sa[103] = -0.018018197f;
      sa[104] = -0.042302776f;
      sa[105] = -0.18431322f;
      sa[106] = 0.45713812f;
      sa[107] = 0.27370533f;
      sa[108] = 0.1132372f;
      sa[109] = 0.24614953f;
      sa[110] = -0.06456712f;
      sa[111] = 0.5221981f;
      sa[112] = -0.7069744f;
      sa[113] = -0.06772052f;
      sa[114] = -0.15350005f;
      sa[115] = 0.03995164f;
      sa[116] = -0.15299878f;
      sa[117] = 0.39882088f;
      sa[118] = -0.54357654f;
      sa[119] = -0.74127847f;
      sa[120] = 0.19440806f;
      sa[121] = 0.22812903f;
      sa[122] = 0.20696104f;
      sa[123] = -0.23911037f;
      sa[124] = -0.06884204f;
      sa[125] = 0.0942749f;
      sa[126] = -0.17608337f;
      sa[127] = 0.3930057f;
      sa[128] = -0.32340783f;
      sa[129] = 0.5977113f;
      sa[130] = -0.3803084f;
      sa[131] = -0.420901f;
      sa[132] = 0.69273907f;
      sa[133] = -0.2833311f;
      sa[134] = -0.26452133f;
      sa[135] = -0.22648956f;
      sa[136] = 0.2590514f;
      sa[137] = -0.29576236f;
      sa[138] = 0.07240929f;
      sa[139] = -0.10441525f;
      sa[140] = 0.31070065f;
      sa[141] = -0.2266401f;
      sa[142] = -0.35848182f;
      sa[143] = 0.19501935f;
      sa[144] = -0.08419628f;
      sa[145] = 0.66080093f;
      sa[146] = 0.33351606f;
      sa[147] = 0.03216196f;
      sa[148] = 0.2588075f;
      sa[149] = 0.06944105f;
      sa[150] = -0.40171552f;
      sa[151] = -0.47499844f;
      sa[152] = 0.69412875f;
      sa[153] = -0.3295526f;
      sa[154] = 0.4494772f;
      sa[155] = -0.35549948f;
      sa[156] = -0.02123607f;
      sa[157] = -0.8470991f;
      sa[158] = -0.0078427f;
      sa[159] = 0.24675082f;
      sa[160] = 0.2905006f;
      sa[161] = -0.1963855f;
      sa[162] = 0.67152894f;
      sa[163] = -0.2714103f;
      sa[164] = -1.0523499f;
      sa[165] = 1.4659761f;
      sa[166] = 0.17375751f;
      sa[167] = -0.56963825f;
      sa[168] = 0.031514384f;
      sa[169] = -0.023334956f;
      sa[170] = -0.101312995f;
      sa[171] = 0.1790556f;
      sa[172] = 0.027293267f;
      sa[173] = 0.12219464f;
      sa[174] = 0.61327773f;
      sa[175] = 0.23090194f;
      sa[176] = 0.04853956f;
      sa[177] = -0.0805787f;
      sa[178] = -0.4701549f;
      sa[179] = 0.4460659f;
      sa[180] = -0.24800625f;
      sa[181] = 0.39402768f;
      sa[182] = 0.27332315f;
      sa[183] = 0.4035241f;
      sa[184] = 0.33120424f;
      sa[185] = -0.2627662f;
      sa[186] = 0.0026982757f;
      sa[187] = -0.49556482f;
      sa[188] = -0.81133527f;
      sa[189] = -0.30157226f;
      sa[190] = -0.116984904f;
      sa[191] = 0.03957072f;
      sa[192] = 0.24394135f;
      sa[193] = -0.08889181f;
      sa[194] = 0.22267315f;
      sa[195] = 0.47953007f;
      sa[196] = 0.12159019f;
      sa[197] = -0.19851944f;
      sa[198] = -0.16961308f;
      sa[199] = 0.278324f;
      sa[200] = 0.03796405f;
      sa[201] = 0.33019355f;
      sa[202] = -0.27907437f;
      sa[203] = -0.2879836f;
      sa[204] = -0.035191424f;
      sa[205] = 0.9503258f;
      sa[206] = -0.05510564f;
      sa[207] = -0.124178134f;
      sa[208] = -0.17894152f;
      sa[209] = -0.15596202f;
      sa[210] = 0.3960975f;
      sa[211] = -0.58689654f;
      sa[212] = -0.04595748f;
      sa[213] = -0.007410753f;
      sa[214] = -0.28740215f;
      sa[215] = 0.014758186f;
      sa[216] = 0.41164044f;
      sa[217] = 0.10951897f;
      sa[218] = -0.21152581f;
      sa[219] = 0.13930905f;
      sa[220] = -0.24751864f;
      sa[221] = -0.28972343f;
      sa[222] = -0.21963473f;
      sa[223] = 0.085100725f;
      sa[224] = -0.05795939f;
      sa[225] = -0.23454309f;
      sa[226] = 0.19791125f;
      sa[227] = 0.34007984f;
      sa[228] = 0.32411617f;
      sa[229] = -0.6087125f;
      sa[230] = 0.021696575f;
      sa[231] = 0.5016571f;
      sa[232] = -0.402258f;
      sa[233] = -1.1693441f;
      sa[234] = 0.2739495f;
      sa[235] = 0.20880862f;
      sa[236] = 0.097581275f;
      sa[237] = 0.026736341f;
      sa[238] = 0.27999574f;
      sa[239] = -0.45835122f;
      sa[240] = -0.18408725f;
      sa[241] = -0.4762986f;
      sa[242] = -0.28845093f;
      sa[243] = 0.42970812f;
      sa[244] = -0.24741134f;
      sa[245] = 0.26914516f;
      sa[246] = 0.3552731f;
      sa[247] = -0.37470686f;
      sa[248] = 0.32214665f;
      sa[249] = 0.6095513f;
      sa[250] = 0.2147271f;
      sa[251] = 0.11555743f;
      sa[252] = -0.15340471f;
      sa[253] = 0.099481165f;
      sa[254] = -0.55050874f;
      sa[255] = -0.1891854f;
      sa[256] = 0.17426656f;
      sa[257] = 0.34403223f;
      sa[258] = 0.02360862f;
      sa[259] = -0.82518953f;
      sa[260] = -0.40160343f;
      sa[261] = -0.7066735f;
      sa[262] = 0.58708125f;
      sa[263] = -0.6435953f;
      sa[264] = -0.10801323f;
      sa[265] = 0.2708267f;
      sa[266] = 0.22777402f;
      sa[267] = -0.09552665f;
      sa[268] = 0.048272356f;
      sa[269] = -0.098867446f;
      sa[270] = -0.049384337f;
      sa[271] = -0.44097534f;
      sa[272] = -0.37666306f;
      sa[273] = -0.4567433f;
      sa[274] = 0.62162536f;
      sa[275] = -0.60927784f;
      sa[276] = 0.13813218f;
      sa[277] = 0.34941235f;
      sa[278] = 0.3228419f;
      sa[279] = -0.29901016f;
      sa[280] = -0.061083857f;
      sa[281] = 0.0014913059f;
      sa[282] = -0.00688521f;
      sa[283] = -0.5113091f;
      sa[284] = 0.3198749f;
      sa[285] = -0.35131732f;
      sa[286] = -0.10253477f;
      sa[287] = 0.16135223f;
      sa[288] = 0.5819992f;
      sa[289] = -0.028679008f;
      sa[290] = -0.56616324f;
      sa[291] = -0.54030365f;
      sa[292] = 0.18924132f;
      sa[293] = 0.559301f;
      sa[294] = -0.25471592f;
      sa[295] = -0.5969297f;
      sa[296] = -0.43145177f;
      sa[297] = 0.19237708f;
      sa[298] = -0.0805322f;
      sa[299] = -0.002407761f;
      sa[300] = 0.09287236f;
      sa[301] = -0.11922732f;
      sa[302] = -0.13552538f;
      sa[303] = -0.1355505f;
      sa[304] = 0.31336638f;
      sa[305] = -0.33190885f;
      sa[306] = -0.28864014f;
      sa[307] = 0.16317646f;
      sa[308] = 0.3577531f;
      sa[309] = 0.43220192f;
      sa[310] = 0.14704716f;
      sa[311] = -0.25742516f;
      sa[312] = 0.1245897f;
      sa[313] = -0.49826622f;
      sa[314] = -0.20513506f;
      sa[315] = -0.33424866f;
      sa[316] = -0.15765831f;
      sa[317] = -0.28750238f;
      sa[318] = -0.2744707f;
      sa[319] = 0.26994762f;
      sa[320] = 0.06989662f;
      sa[321] = -0.25058052f;
      sa[322] = 0.18257375f;
      sa[323] = 0.21869838f;
      sa[324] = -0.26820078f;
      sa[325] = -0.5903692f;
      sa[326] = 0.029138839f;
      sa[327] = -0.39415592f;
      sa[328] = -0.12362388f;
      sa[329] = 0.92310256f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class dl_fit3_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[100];
  static {
    dl_fit3_Weight_2_0.fill(VALUES);
  }
  static final class dl_fit3_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.17455716f;
      sa[1] = -0.63831544f;
      sa[2] = -0.8747475f;
      sa[3] = 0.073174246f;
      sa[4] = -0.7218236f;
      sa[5] = -0.6931699f;
      sa[6] = -1.1816944f;
      sa[7] = 0.46667668f;
      sa[8] = 0.7408203f;
      sa[9] = -0.043592382f;
      sa[10] = 0.25619546f;
      sa[11] = 0.18738206f;
      sa[12] = 0.2763489f;
      sa[13] = 0.034270816f;
      sa[14] = -0.44017553f;
      sa[15] = -0.08390101f;
      sa[16] = 0.07884765f;
      sa[17] = -0.739594f;
      sa[18] = -0.42131716f;
      sa[19] = -0.3508567f;
      sa[20] = -0.30315962f;
      sa[21] = 0.29785332f;
      sa[22] = -0.90984786f;
      sa[23] = -0.81987506f;
      sa[24] = 0.2920235f;
      sa[25] = 0.057449933f;
      sa[26] = 0.083762586f;
      sa[27] = 0.003988252f;
      sa[28] = 0.4431834f;
      sa[29] = -0.5111997f;
      sa[30] = -0.07736162f;
      sa[31] = 0.1747841f;
      sa[32] = -0.108378805f;
      sa[33] = 0.16116667f;
      sa[34] = 0.1387652f;
      sa[35] = -0.07800835f;
      sa[36] = -0.76621157f;
      sa[37] = -0.7818035f;
      sa[38] = 0.6840088f;
      sa[39] = -0.23317845f;
      sa[40] = 0.57312924f;
      sa[41] = -0.42522627f;
      sa[42] = -0.20966929f;
      sa[43] = -0.99299467f;
      sa[44] = -0.10239287f;
      sa[45] = -0.7919805f;
      sa[46] = 0.14923367f;
      sa[47] = 0.5885792f;
      sa[48] = 0.12642173f;
      sa[49] = 0.16982295f;
      sa[50] = 0.17855307f;
      sa[51] = 0.29608783f;
      sa[52] = 0.061663315f;
      sa[53] = -0.05064437f;
      sa[54] = 0.29550704f;
      sa[55] = 0.5447037f;
      sa[56] = -0.2575733f;
      sa[57] = -0.15056331f;
      sa[58] = 0.57901543f;
      sa[59] = -0.059036396f;
      sa[60] = -0.90333635f;
      sa[61] = 0.25179443f;
      sa[62] = 0.21752669f;
      sa[63] = -0.6320425f;
      sa[64] = -0.21463439f;
      sa[65] = -0.9680108f;
      sa[66] = -0.14835317f;
      sa[67] = 0.29265535f;
      sa[68] = 0.33043596f;
      sa[69] = -0.861265f;
      sa[70] = -0.60638916f;
      sa[71] = 3.7329458E-4f;
      sa[72] = -0.06543704f;
      sa[73] = 0.024274945f;
      sa[74] = -0.09500118f;
      sa[75] = 0.334213f;
      sa[76] = 0.28369033f;
      sa[77] = -0.1723249f;
      sa[78] = -0.022761252f;
      sa[79] = -0.21386613f;
      sa[80] = 0.034723412f;
      sa[81] = -0.7082123f;
      sa[82] = -0.13289288f;
      sa[83] = -0.3659328f;
      sa[84] = 0.18477884f;
      sa[85] = 0.09545336f;
      sa[86] = -0.6451426f;
      sa[87] = -0.16275501f;
      sa[88] = -0.8366521f;
      sa[89] = -0.679503f;
      sa[90] = -0.28371257f;
      sa[91] = -0.06924056f;
      sa[92] = -0.122370146f;
      sa[93] = 0.49069327f;
      sa[94] = 0.2289972f;
      sa[95] = -0.27410966f;
      sa[96] = -0.5283624f;
      sa[97] = 0.23692656f;
      sa[98] = -0.5010859f;
      sa[99] = 0.15421793f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class dl_fit3_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[20];
  static {
    dl_fit3_Weight_3_0.fill(VALUES);
  }
  static final class dl_fit3_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -2.3529308f;
      sa[1] = 0.5278648f;
      sa[2] = 2.2161984f;
      sa[3] = 0.7110786f;
      sa[4] = -1.3503444f;
      sa[5] = 1.8422358f;
      sa[6] = 2.3052785f;
      sa[7] = 1.4886533f;
      sa[8] = 0.8761389f;
      sa[9] = 0.42508346f;
      sa[10] = -1.4758528f;
      sa[11] = 1.1045063f;
      sa[12] = 2.750369f;
      sa[13] = 0.95083827f;
      sa[14] = -1.6191992f;
      sa[15] = 1.3136485f;
      sa[16] = 1.7689903f;
      sa[17] = 1.0586405f;
      sa[18] = -1.4050934f;
      sa[19] = 0.8183365f;
    }
  }
}
// The class representing training column names
class NamesHolder_dl_fit3 implements java.io.Serializable {
  public static final String[] VALUES = new String[33];
  static {
    NamesHolder_dl_fit3_0.fill(VALUES);
  }
  static final class NamesHolder_dl_fit3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "overall_rating";
      sa[1] = "potential";
      sa[2] = "preferred_footright";
      sa[3] = "attacking_work_ratelow";
      sa[4] = "attacking_work_ratemedium";
      sa[5] = "defensive_work_ratelow";
      sa[6] = "defensive_work_ratemedium";
      sa[7] = "crossing";
      sa[8] = "finishing";
      sa[9] = "heading_accuracy";
      sa[10] = "volleys";
      sa[11] = "dribbling";
      sa[12] = "curve";
      sa[13] = "free_kick_accuracy";
      sa[14] = "long_passing";
      sa[15] = "ball_control";
      sa[16] = "agility";
      sa[17] = "reactions";
      sa[18] = "shot_power";
      sa[19] = "jumping";
      sa[20] = "stamina";
      sa[21] = "strength";
      sa[22] = "aggression";
      sa[23] = "interceptions";
      sa[24] = "positioning";
      sa[25] = "vision";
      sa[26] = "penalties";
      sa[27] = "marking";
      sa[28] = "standing_tackle";
      sa[29] = "sliding_tackle";
      sa[30] = "gk_diving";
      sa[31] = "gk_handling";
      sa[32] = "gk_kicking";
    }
  }
}
// The class representing column positionSUB
class dl_fit3_ColInfo_33 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    dl_fit3_ColInfo_33_0.fill(VALUES);
  }
  static final class dl_fit3_ColInfo_33_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

