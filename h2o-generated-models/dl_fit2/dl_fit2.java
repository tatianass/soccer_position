/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-08-13T21:01:06.017-03:00
  3.10.5.3
  
  Standalone prediction code with sample test data for DeepLearningModel named dl_fit2

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http:/localhost/127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http:/localhost/127.0.0.1:54321/3/Models.java/dl_fit2 > dl_fit2.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m dl_fit2.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="dl_fit2", algorithm="deeplearning")
public class dl_fit2 extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }
  public boolean isSupervised() { return true; }
  public int nfeatures() { return 33; }
  public int nclasses() { return 2; }
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[33];
  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[33];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 0.14303284157613805;
        sa[1] = 0.15198149597267357;
        sa[2] = 2.3398757114850626;
        sa[3] = 4.632571600282012;
        sa[4] = 2.1874431228219526;
        sa[5] = 3.277915482446839;
        sa[6] = 2.2799653050365416;
        sa[7] = 0.058354787648175935;
        sa[8] = 0.05267858405494233;
        sa[9] = 0.061071057799624656;
        sa[10] = 0.05500642590081838;
        sa[11] = 0.05676565187181893;
        sa[12] = 0.054899934459167146;
        sa[13] = 0.05620880628427175;
        sa[14] = 0.06980462928116293;
        sa[15] = 0.06656928101437071;
        sa[16] = 0.07727863286005399;
        sa[17] = 0.11026485619633644;
        sa[18] = 0.06267718548116735;
        sa[19] = 0.09036257102985362;
        sa[20] = 0.07634362399842087;
        sa[21] = 0.0827303675178818;
        sa[22] = 0.06251077089031995;
        sa[23] = 0.05122937321846432;
        sa[24] = 0.05441512676233111;
        sa[25] = 0.06631899593706968;
        sa[26] = 0.06447428516913292;
        sa[27] = 0.04703064572359878;
        sa[28] = 0.04649056485490492;
        sa[29] = 0.04628615230055028;
        sa[30] = 0.060353161196956294;
        sa[31] = 0.06413753579066005;
        sa[32] = 0.048190387101530396;
      }
    }
}
  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[33];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 68.89088899273844;
        sa[1] = 73.67564167086056;
        sa[2] = 0.7595262060536343;
        sa[3] = 0.04899705226831548;
        sa[4] = 0.7025127615213171;
        sa[5] = 0.10385361995830038;
        sa[6] = 0.7400603925515853;
        sa[7] = 55.46314436695668;
        sa[8] = 50.33744338198289;
        sa[9] = 57.558595154216746;
        sa[10] = 49.86942806815729;
        sa[11] = 59.690371342296324;
        sa[12] = 53.41284420159613;
        sa[13] = 49.70390574448204;
        sa[14] = 57.427466029189745;
        sa[15] = 63.86453016032781;
        sa[16] = 66.31483212308572;
        sa[17] = 66.4853512114457;
        sa[18] = 62.29066611546482;
        sa[19] = 67.13154252642173;
        sa[20] = 67.35123840678698;
        sa[21] = 67.54804443166292;
        sa[22] = 61.21256021281183;
        sa[23] = 52.12956538931628;
        sa[24] = 56.04672334459704;
        sa[25] = 58.214690128693626;
        sa[26] = 55.10869760586675;
        sa[27] = 46.938142569559275;
        sa[28] = 50.59069667122005;
        sa[29] = 48.186462003019635;
        sa[30] = 14.527608023581855;
        sa[31] = 15.670995398662745;
        sa[32] = 19.969309439930964;
      }
    }
}
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {33,10,10,2};
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][] {
      /* Input */ dl_fit2_Activation_0.VALUES,
      /* Rectifier */ dl_fit2_Activation_1.VALUES,
      /* Rectifier */ dl_fit2_Activation_2.VALUES,
      /* Softmax */ dl_fit2_Activation_3.VALUES
    };
    // Neuron bias values.
    public static final double[][] BIAS = new double[][] {
      /* Input */ dl_fit2_Bias_0.VALUES,
      /* Rectifier */ dl_fit2_Bias_1.VALUES,
      /* Rectifier */ dl_fit2_Bias_2.VALUES,
      /* Softmax */ dl_fit2_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][] {
      /* Input */ dl_fit2_Weight_0.VALUES,
      /* Rectifier */ dl_fit2_Weight_1.VALUES,
      /* Rectifier */ dl_fit2_Weight_2.VALUES,
      /* Softmax */ dl_fit2_Weight_3.VALUES
    };

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_dl_fit2.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* overall_rating */ null,
    /* potential */ null,
    /* preferred_footright */ null,
    /* attacking_work_ratelow */ null,
    /* attacking_work_ratemedium */ null,
    /* defensive_work_ratelow */ null,
    /* defensive_work_ratemedium */ null,
    /* crossing */ null,
    /* finishing */ null,
    /* heading_accuracy */ null,
    /* volleys */ null,
    /* dribbling */ null,
    /* curve */ null,
    /* free_kick_accuracy */ null,
    /* long_passing */ null,
    /* ball_control */ null,
    /* agility */ null,
    /* reactions */ null,
    /* shot_power */ null,
    /* jumping */ null,
    /* stamina */ null,
    /* strength */ null,
    /* aggression */ null,
    /* interceptions */ null,
    /* positioning */ null,
    /* vision */ null,
    /* penalties */ null,
    /* marking */ null,
    /* standing_tackle */ null,
    /* sliding_tackle */ null,
    /* gk_diving */ null,
    /* gk_handling */ null,
    /* gk_kicking */ null,
    /* positionSUB */ dl_fit2_ColInfo_33.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.47163706952333023,0.5283629304766698};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;

  public dl_fit2() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(6231237385371934400L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    java.util.Arrays.fill(NUMS,0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for(; i<n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i])*NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0],0);
    for (i=0; i<NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length-1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i=1; i<ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i],0);
      int cols = ACTIVATION[i-1].length;
      int rows = ACTIVATION[i].length;
      int extra=cols-cols%8;
      int multiple = (cols/8)*8-1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i-1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row=0; row<rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off    ] * x[col    ];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i<ACTIVATION.length-1) {
        for (int r=0; r<ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length-1) {
        double max = ACTIVATION[i][0];
        for (int r=1; r<ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r]>max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r=0; r<ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r=0; r<ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r+1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.32334621201132746);
    return preds;
  }
}
// Neuron activation values for Input layer
class dl_fit2_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[33];
  static {
    dl_fit2_Activation_0_0.fill(VALUES);
  }
  static final class dl_fit2_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
      sa[16] = 0.0;
      sa[17] = 0.0;
      sa[18] = 0.0;
      sa[19] = 0.0;
      sa[20] = 0.0;
      sa[21] = 0.0;
      sa[22] = 0.0;
      sa[23] = 0.0;
      sa[24] = 0.0;
      sa[25] = 0.0;
      sa[26] = 0.0;
      sa[27] = 0.0;
      sa[28] = 0.0;
      sa[29] = 0.0;
      sa[30] = 0.0;
      sa[31] = 0.0;
      sa[32] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class dl_fit2_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit2_Activation_1_0.fill(VALUES);
  }
  static final class dl_fit2_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class dl_fit2_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit2_Activation_2_0.fill(VALUES);
  }
  static final class dl_fit2_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class dl_fit2_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    dl_fit2_Activation_3_0.fill(VALUES);
  }
  static final class dl_fit2_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class dl_fit2_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class dl_fit2_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit2_Bias_1_0.fill(VALUES);
  }
  static final class dl_fit2_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = -0.36885863694679877;
      sa[1] = -0.04146124014195078;
      sa[2] = -0.3377214814011515;
      sa[3] = 0.13498507428986706;
      sa[4] = -0.4556814051987126;
      sa[5] = -0.6794791841263492;
      sa[6] = -0.24356299690572827;
      sa[7] = -1.0691212608067882;
      sa[8] = -0.26234342934381244;
      sa[9] = 0.30406967348842;
    }
  }
}
// Neuron bias values for Rectifier layer
class dl_fit2_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[10];
  static {
    dl_fit2_Bias_2_0.fill(VALUES);
  }
  static final class dl_fit2_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.067587773538179;
      sa[1] = 0.8929863911689943;
      sa[2] = 0.4660114764131114;
      sa[3] = 0.24728938367015416;
      sa[4] = -0.4257288313367708;
      sa[5] = 0.5480250409017363;
      sa[6] = 0.8558243282888413;
      sa[7] = 1.0124025080773296;
      sa[8] = -0.008253990738756121;
      sa[9] = 0.6558184230998003;
    }
  }
}
// Neuron bias values for Softmax layer
class dl_fit2_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[2];
  static {
    dl_fit2_Bias_3_0.fill(VALUES);
  }
  static final class dl_fit2_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.049152593258079365;
      sa[1] = 0.03697718520024615;
    }
  }
}
class dl_fit2_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class dl_fit2_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[330];
  static {
    dl_fit2_Weight_1_0.fill(VALUES);
  }
  static final class dl_fit2_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.45228025f;
      sa[1] = -0.11399208f;
      sa[2] = 0.99155384f;
      sa[3] = 0.11439894f;
      sa[4] = 0.12923455f;
      sa[5] = 0.14832418f;
      sa[6] = 0.29704168f;
      sa[7] = -0.49406168f;
      sa[8] = 0.51874924f;
      sa[9] = 0.27648643f;
      sa[10] = 0.5972387f;
      sa[11] = 0.2594879f;
      sa[12] = 0.31757993f;
      sa[13] = -0.20750442f;
      sa[14] = 0.29779878f;
      sa[15] = -0.28208777f;
      sa[16] = -0.3700228f;
      sa[17] = -0.04919892f;
      sa[18] = -0.13537823f;
      sa[19] = -0.32773307f;
      sa[20] = 0.791231f;
      sa[21] = -0.9856585f;
      sa[22] = 0.07697551f;
      sa[23] = -0.2324127f;
      sa[24] = 0.44732133f;
      sa[25] = -0.5948002f;
      sa[26] = -0.18442981f;
      sa[27] = -0.319138f;
      sa[28] = -0.065011576f;
      sa[29] = 0.96253335f;
      sa[30] = 0.33730367f;
      sa[31] = 0.40482113f;
      sa[32] = -0.41902715f;
      sa[33] = -0.11954248f;
      sa[34] = -0.19005738f;
      sa[35] = -0.03320028f;
      sa[36] = -0.11698834f;
      sa[37] = 0.06520423f;
      sa[38] = 0.11954324f;
      sa[39] = -0.14256202f;
      sa[40] = 0.040429518f;
      sa[41] = -0.11108204f;
      sa[42] = 0.16246895f;
      sa[43] = 0.47921687f;
      sa[44] = 0.2823286f;
      sa[45] = -0.66277313f;
      sa[46] = 0.26117596f;
      sa[47] = -0.13160935f;
      sa[48] = 0.38040158f;
      sa[49] = 0.005271105f;
      sa[50] = 0.37163907f;
      sa[51] = -0.125899f;
      sa[52] = 0.048136577f;
      sa[53] = 0.081656724f;
      sa[54] = 0.24436411f;
      sa[55] = 0.955454f;
      sa[56] = 0.3649664f;
      sa[57] = -0.4047097f;
      sa[58] = -0.25861272f;
      sa[59] = -0.17520125f;
      sa[60] = 0.24544816f;
      sa[61] = 0.11132856f;
      sa[62] = -0.22708961f;
      sa[63] = -0.10244739f;
      sa[64] = 0.82807124f;
      sa[65] = -0.081053875f;
      sa[66] = 0.27351543f;
      sa[67] = 0.15767708f;
      sa[68] = 0.805335f;
      sa[69] = 0.3311723f;
      sa[70] = -0.3764189f;
      sa[71] = -0.07548642f;
      sa[72] = -0.7229843f;
      sa[73] = 0.2871073f;
      sa[74] = 0.17038243f;
      sa[75] = -0.32864183f;
      sa[76] = -0.095486924f;
      sa[77] = -0.58361506f;
      sa[78] = -0.19509952f;
      sa[79] = -0.45581052f;
      sa[80] = -0.24579506f;
      sa[81] = 0.16520385f;
      sa[82] = 0.35851142f;
      sa[83] = 0.22483455f;
      sa[84] = 0.045897562f;
      sa[85] = -0.009747159f;
      sa[86] = 0.12140283f;
      sa[87] = -0.52962106f;
      sa[88] = -0.8785694f;
      sa[89] = 0.28871956f;
      sa[90] = 0.098459795f;
      sa[91] = 0.120733194f;
      sa[92] = -0.2070467f;
      sa[93] = -0.12366538f;
      sa[94] = -0.008632677f;
      sa[95] = 0.10387919f;
      sa[96] = 0.017579628f;
      sa[97] = -0.114762984f;
      sa[98] = 0.111642435f;
      sa[99] = 0.22793159f;
      sa[100] = -0.584908f;
      sa[101] = -0.337825f;
      sa[102] = 0.48054162f;
      sa[103] = 0.28164685f;
      sa[104] = -0.22375101f;
      sa[105] = -0.42711183f;
      sa[106] = -0.030459886f;
      sa[107] = 0.34097138f;
      sa[108] = -0.05998184f;
      sa[109] = 0.6025789f;
      sa[110] = 0.09018592f;
      sa[111] = -0.04540233f;
      sa[112] = -0.73183566f;
      sa[113] = -0.60185957f;
      sa[114] = 0.2793273f;
      sa[115] = 0.055943828f;
      sa[116] = 0.213033f;
      sa[117] = 0.49174023f;
      sa[118] = -0.29251873f;
      sa[119] = -0.8653871f;
      sa[120] = 0.042805247f;
      sa[121] = 0.6302824f;
      sa[122] = 0.12458716f;
      sa[123] = -0.17273743f;
      sa[124] = -0.15139405f;
      sa[125] = 0.21748392f;
      sa[126] = -0.28904048f;
      sa[127] = 0.17618605f;
      sa[128] = -0.5801367f;
      sa[129] = 0.7174077f;
      sa[130] = -0.3378429f;
      sa[131] = -0.0019000976f;
      sa[132] = 0.37797812f;
      sa[133] = -0.037250973f;
      sa[134] = -0.84263754f;
      sa[135] = -0.39707318f;
      sa[136] = 0.0921743f;
      sa[137] = -0.23724042f;
      sa[138] = 0.034639906f;
      sa[139] = -0.31022903f;
      sa[140] = -0.21094683f;
      sa[141] = -0.60153455f;
      sa[142] = 0.42595953f;
      sa[143] = -0.49542373f;
      sa[144] = 0.35675272f;
      sa[145] = 0.22767015f;
      sa[146] = 0.021983279f;
      sa[147] = 0.026349986f;
      sa[148] = -0.5868458f;
      sa[149] = 0.23546721f;
      sa[150] = -0.67656523f;
      sa[151] = -0.64837277f;
      sa[152] = 0.496822f;
      sa[153] = -0.28522995f;
      sa[154] = -0.11296574f;
      sa[155] = 0.34768295f;
      sa[156] = 0.38009837f;
      sa[157] = -0.138934f;
      sa[158] = -0.43230075f;
      sa[159] = 0.045631118f;
      sa[160] = 0.115995534f;
      sa[161] = -0.37533596f;
      sa[162] = 0.21981955f;
      sa[163] = -0.8364892f;
      sa[164] = -0.13864148f;
      sa[165] = 0.8091688f;
      sa[166] = -0.45268175f;
      sa[167] = 0.0044588395f;
      sa[168] = 0.17786905f;
      sa[169] = -0.24899317f;
      sa[170] = 0.5151733f;
      sa[171] = 0.8003697f;
      sa[172] = -0.28218037f;
      sa[173] = -0.016084068f;
      sa[174] = -0.18918295f;
      sa[175] = 0.21853067f;
      sa[176] = -0.05891016f;
      sa[177] = -0.60829574f;
      sa[178] = -0.01910874f;
      sa[179] = -0.15599316f;
      sa[180] = 0.22991228f;
      sa[181] = -0.1527937f;
      sa[182] = 0.7075199f;
      sa[183] = -0.14637126f;
      sa[184] = 0.47455397f;
      sa[185] = 0.9444433f;
      sa[186] = -0.19277492f;
      sa[187] = 0.32625264f;
      sa[188] = -0.27732924f;
      sa[189] = -0.37031752f;
      sa[190] = 0.36461177f;
      sa[191] = 0.2482029f;
      sa[192] = -0.38689068f;
      sa[193] = 0.047437876f;
      sa[194] = -0.5255782f;
      sa[195] = -0.12786782f;
      sa[196] = 0.22203903f;
      sa[197] = -0.43691006f;
      sa[198] = 0.722056f;
      sa[199] = 0.15799752f;
      sa[200] = -0.15638003f;
      sa[201] = 0.22344491f;
      sa[202] = -0.024134245f;
      sa[203] = -0.20292996f;
      sa[204] = -0.055486217f;
      sa[205] = 0.13559657f;
      sa[206] = -0.23504405f;
      sa[207] = 0.41964823f;
      sa[208] = 0.31612438f;
      sa[209] = 0.1600766f;
      sa[210] = -0.18555571f;
      sa[211] = -0.28750023f;
      sa[212] = 0.12828624f;
      sa[213] = -0.17557202f;
      sa[214] = -0.008552767f;
      sa[215] = 0.18868127f;
      sa[216] = 0.7440684f;
      sa[217] = -0.053839732f;
      sa[218] = -0.09193595f;
      sa[219] = -0.28727597f;
      sa[220] = -0.059210654f;
      sa[221] = 0.003571826f;
      sa[222] = 0.012132265f;
      sa[223] = -0.4165039f;
      sa[224] = -0.18491662f;
      sa[225] = -0.1679257f;
      sa[226] = 0.03805284f;
      sa[227] = 0.2145735f;
      sa[228] = 1.1559409f;
      sa[229] = -0.63346297f;
      sa[230] = 0.17848875f;
      sa[231] = 0.003829331f;
      sa[232] = 0.3416175f;
      sa[233] = 0.08575218f;
      sa[234] = 0.38352558f;
      sa[235] = 0.30315188f;
      sa[236] = -0.52784175f;
      sa[237] = -0.72665864f;
      sa[238] = 0.41136658f;
      sa[239] = -0.07107086f;
      sa[240] = -1.1278056f;
      sa[241] = -0.59648937f;
      sa[242] = 0.15773661f;
      sa[243] = 0.7078268f;
      sa[244] = 0.39995918f;
      sa[245] = -0.057847727f;
      sa[246] = -0.11269548f;
      sa[247] = 0.44631144f;
      sa[248] = -0.3580178f;
      sa[249] = 0.58160627f;
      sa[250] = 0.09101338f;
      sa[251] = 0.1748591f;
      sa[252] = 0.13658357f;
      sa[253] = -0.072894774f;
      sa[254] = 0.09017683f;
      sa[255] = 0.34265575f;
      sa[256] = -0.6867808f;
      sa[257] = 0.39564398f;
      sa[258] = -0.033050977f;
      sa[259] = 0.08477298f;
      sa[260] = 0.89050764f;
      sa[261] = 0.27150732f;
      sa[262] = 0.7691636f;
      sa[263] = -0.63864493f;
      sa[264] = 0.63857716f;
      sa[265] = 0.18314351f;
      sa[266] = -1.2025747f;
      sa[267] = -0.35755786f;
      sa[268] = -0.1839145f;
      sa[269] = 0.27111784f;
      sa[270] = 0.04925593f;
      sa[271] = -0.5766113f;
      sa[272] = 0.50564164f;
      sa[273] = 0.2640956f;
      sa[274] = -0.15529422f;
      sa[275] = 0.5142477f;
      sa[276] = -0.48311839f;
      sa[277] = 0.30834815f;
      sa[278] = 0.105229296f;
      sa[279] = -0.54338723f;
      sa[280] = 0.41990072f;
      sa[281] = -0.29932112f;
      sa[282] = -0.3556657f;
      sa[283] = 0.06834229f;
      sa[284] = 0.38909823f;
      sa[285] = 0.04101444f;
      sa[286] = -0.19951543f;
      sa[287] = -0.682934f;
      sa[288] = -0.490361f;
      sa[289] = 0.24846728f;
      sa[290] = 0.1729378f;
      sa[291] = 1.0016907f;
      sa[292] = 0.0534138f;
      sa[293] = 0.15950146f;
      sa[294] = 0.20036544f;
      sa[295] = 0.1034781f;
      sa[296] = -0.46846983f;
      sa[297] = 0.60966676f;
      sa[298] = 0.16542056f;
      sa[299] = 0.43058038f;
      sa[300] = -0.61960447f;
      sa[301] = 0.43385288f;
      sa[302] = -0.21716255f;
      sa[303] = -0.10184124f;
      sa[304] = 0.26002693f;
      sa[305] = -0.2147227f;
      sa[306] = 0.4443844f;
      sa[307] = 0.21540438f;
      sa[308] = 0.059005555f;
      sa[309] = 0.12886383f;
      sa[310] = 0.3421528f;
      sa[311] = -0.12059146f;
      sa[312] = -0.33243033f;
      sa[313] = -0.20307994f;
      sa[314] = -0.19091849f;
      sa[315] = -0.103897914f;
      sa[316] = -0.46245846f;
      sa[317] = -0.06668136f;
      sa[318] = -0.5687271f;
      sa[319] = -0.36336184f;
      sa[320] = 0.11023819f;
      sa[321] = -0.034074266f;
      sa[322] = 0.26234496f;
      sa[323] = 0.16276835f;
      sa[324] = -0.11673483f;
      sa[325] = -0.40841463f;
      sa[326] = -0.52463174f;
      sa[327] = -0.8267241f;
      sa[328] = 0.051838532f;
      sa[329] = 0.45554498f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class dl_fit2_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[100];
  static {
    dl_fit2_Weight_2_0.fill(VALUES);
  }
  static final class dl_fit2_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.07266549f;
      sa[1] = -0.33477873f;
      sa[2] = -0.7941566f;
      sa[3] = 0.024830617f;
      sa[4] = -0.26257285f;
      sa[5] = -0.9927938f;
      sa[6] = -0.6467449f;
      sa[7] = 0.5195214f;
      sa[8] = 0.685166f;
      sa[9] = -0.013224789f;
      sa[10] = 0.30943108f;
      sa[11] = 0.121883124f;
      sa[12] = 0.3131367f;
      sa[13] = -0.27202106f;
      sa[14] = -1.0967423f;
      sa[15] = -0.11073135f;
      sa[16] = 0.16329367f;
      sa[17] = -0.14919387f;
      sa[18] = -0.49325064f;
      sa[19] = -0.6047991f;
      sa[20] = -1.7585148f;
      sa[21] = -0.15671706f;
      sa[22] = -0.77499056f;
      sa[23] = -0.34335592f;
      sa[24] = -0.12540187f;
      sa[25] = 0.73350596f;
      sa[26] = -0.21902286f;
      sa[27] = 0.7854083f;
      sa[28] = 0.11668073f;
      sa[29] = -0.30530977f;
      sa[30] = 0.15095569f;
      sa[31] = -0.33776128f;
      sa[32] = -0.33612502f;
      sa[33] = 0.43526983f;
      sa[34] = 0.51852524f;
      sa[35] = -0.039715007f;
      sa[36] = 7.869716E-4f;
      sa[37] = -1.1637751f;
      sa[38] = 0.057917614f;
      sa[39] = 0.060979616f;
      sa[40] = 0.20236214f;
      sa[41] = -0.011953777f;
      sa[42] = -0.43944147f;
      sa[43] = -0.5806654f;
      sa[44] = -0.06262484f;
      sa[45] = 0.12645203f;
      sa[46] = -1.677083f;
      sa[47] = 0.6972362f;
      sa[48] = 0.21880029f;
      sa[49] = -1.4358903f;
      sa[50] = -0.11426118f;
      sa[51] = -0.14892837f;
      sa[52] = -0.17679727f;
      sa[53] = -4.477141E-4f;
      sa[54] = 0.7946111f;
      sa[55] = 0.19907282f;
      sa[56] = -0.12485431f;
      sa[57] = 0.38954297f;
      sa[58] = 0.54903394f;
      sa[59] = 0.054864775f;
      sa[60] = 0.049411546f;
      sa[61] = 0.6259009f;
      sa[62] = 0.015754001f;
      sa[63] = -1.4133234f;
      sa[64] = -0.13726537f;
      sa[65] = -0.53483367f;
      sa[66] = -0.5715342f;
      sa[67] = -0.12447837f;
      sa[68] = -0.15945219f;
      sa[69] = -0.9016736f;
      sa[70] = -0.12278101f;
      sa[71] = -0.64664656f;
      sa[72] = -0.23801346f;
      sa[73] = 0.029573396f;
      sa[74] = -0.3272025f;
      sa[75] = 0.39843833f;
      sa[76] = 0.796615f;
      sa[77] = 0.011276034f;
      sa[78] = -0.25262037f;
      sa[79] = -0.4016907f;
      sa[80] = 0.2112459f;
      sa[81] = -0.9995943f;
      sa[82] = -0.05035129f;
      sa[83] = -0.3065369f;
      sa[84] = 0.005620235f;
      sa[85] = 0.12308809f;
      sa[86] = -0.7529052f;
      sa[87] = 0.07976981f;
      sa[88] = -0.5913825f;
      sa[89] = -0.4301523f;
      sa[90] = -0.7498388f;
      sa[91] = 0.488831f;
      sa[92] = -0.20590368f;
      sa[93] = -0.1280157f;
      sa[94] = 0.66659355f;
      sa[95] = 0.4452507f;
      sa[96] = 0.036627814f;
      sa[97] = -0.16678831f;
      sa[98] = -0.7713938f;
      sa[99] = -0.16231863f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class dl_fit2_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[20];
  static {
    dl_fit2_Weight_3_0.fill(VALUES);
  }
  static final class dl_fit2_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -2.2095716f;
      sa[1] = 0.44578597f;
      sa[2] = 2.1536777f;
      sa[3] = 0.48060432f;
      sa[4] = -0.994593f;
      sa[5] = 1.8544163f;
      sa[6] = 2.4062083f;
      sa[7] = 1.5318239f;
      sa[8] = 1.089073f;
      sa[9] = 0.31604478f;
      sa[10] = -1.6293198f;
      sa[11] = 1.2097914f;
      sa[12] = 2.8760026f;
      sa[13] = 1.0769172f;
      sa[14] = -1.9362415f;
      sa[15] = 1.2959646f;
      sa[16] = 1.7446069f;
      sa[17] = 0.9369663f;
      sa[18] = -1.6185881f;
      sa[19] = 0.92581993f;
    }
  }
}
// The class representing training column names
class NamesHolder_dl_fit2 implements java.io.Serializable {
  public static final String[] VALUES = new String[33];
  static {
    NamesHolder_dl_fit2_0.fill(VALUES);
  }
  static final class NamesHolder_dl_fit2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "overall_rating";
      sa[1] = "potential";
      sa[2] = "preferred_footright";
      sa[3] = "attacking_work_ratelow";
      sa[4] = "attacking_work_ratemedium";
      sa[5] = "defensive_work_ratelow";
      sa[6] = "defensive_work_ratemedium";
      sa[7] = "crossing";
      sa[8] = "finishing";
      sa[9] = "heading_accuracy";
      sa[10] = "volleys";
      sa[11] = "dribbling";
      sa[12] = "curve";
      sa[13] = "free_kick_accuracy";
      sa[14] = "long_passing";
      sa[15] = "ball_control";
      sa[16] = "agility";
      sa[17] = "reactions";
      sa[18] = "shot_power";
      sa[19] = "jumping";
      sa[20] = "stamina";
      sa[21] = "strength";
      sa[22] = "aggression";
      sa[23] = "interceptions";
      sa[24] = "positioning";
      sa[25] = "vision";
      sa[26] = "penalties";
      sa[27] = "marking";
      sa[28] = "standing_tackle";
      sa[29] = "sliding_tackle";
      sa[30] = "gk_diving";
      sa[31] = "gk_handling";
      sa[32] = "gk_kicking";
    }
  }
}
// The class representing column positionSUB
class dl_fit2_ColInfo_33 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    dl_fit2_ColInfo_33_0.fill(VALUES);
  }
  static final class dl_fit2_ColInfo_33_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "0";
      sa[1] = "1";
    }
  }
}

